import{_ as n,p as a,q as s,Y as l}from"./framework-e1bed10d.js";const e={},t=l(`<h1 id="算法" tabindex="-1"><a class="header-anchor" href="#算法" aria-hidden="true">#</a> 算法</h1><h2 id="递归" tabindex="-1"><a class="header-anchor" href="#递归" aria-hidden="true">#</a> 递归</h2><blockquote><p>与栈类似，都是先进后出</p></blockquote><ul><li>递:调用自身，一层一层的深入直到终止条件</li><li>归:达到终止条件后，一层一层的返回（一般性数据都是在归的时候计算）</li></ul><h2 id="时间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度" aria-hidden="true">#</a> 时间复杂度</h2><blockquote><p>一个程序中出现多阶，取复杂度最高的，忽略小的。 算法运行时间随着数据量变大时的增长趋势。</p></blockquote><ul><li>常数阶：操作数量与输入数据无关始终都是o(1)</li><li>线性阶：o(n) 操作数量与输入数据大小成线性增长，一般用于单次循环 <ul><li>ps:一般n+1 2n 5n+2 等 都看作为n</li></ul></li><li>平方阶：o(n^2) 通常用于多次循环 <ul><li>ps:多次循环中用乘法</li></ul></li><li>指数阶：o(2^n) 代表性的是 细胞分裂案例，或者递归树</li><li>对数阶：o(log n) 代表性的是 每次循环的数量都对半减少</li><li>线性对数阶：o(n log n) 常用与 递归树 对半减少</li><li>阶乘阶：o(n!)：每次分裂出n-1个 递归执行</li></ul><h2 id="空间复杂度" tabindex="-1"><a class="header-anchor" href="#空间复杂度" aria-hidden="true">#</a> 空间复杂度</h2><blockquote><p>占用内存空间</p></blockquote><h3 id="算法相关空间" tabindex="-1"><a class="header-anchor" href="#算法相关空间" aria-hidden="true">#</a> 算法相关空间</h3><blockquote><p>算法在运行过程中使用的内存空间，一般情况下空间复杂度，取决于 暂存空间 + 输出空间。</p></blockquote><ul><li>输入空间：用于存储算法的输入数据。</li><li>暂存空间：用于存储运行过程中的变量，对象，函数上下文等。 <ul><li>暂存数据：用于存储算法运行过程中的各种常量、变量、对象等。</li><li>帧栈空间：用于存储调用函数的上下文数据，系统在次调用函数运行时，都会在栈的顶部创建一个栈帧空间，函数返回时，释放栈帧空间。</li><li>指令空间：用于保存编译后的程序指令</li></ul></li><li>输出空间：用于存储算法的输出数据。</li></ul><h3 id="常见的复杂度类型" tabindex="-1"><a class="header-anchor" href="#常见的复杂度类型" aria-hidden="true">#</a> 常见的复杂度类型</h3><blockquote><p>空间复杂度只论最坏的情况，因为内存是十分珍贵的。 复杂度从差到优， O(1) =&gt; O(log n) =&gt; O(n) =&gt; O(n^2) =&gt; O(2^n)</p></blockquote><ul><li>常阶数：O(1)</li></ul><blockquote><p>常量、对象、变量 都只占用O(1)空间 循环中的变量、函数也只占用O(1)空间 递归也属于O(n),因为他向下递的时候会有n个栈帧空间</p></blockquote><ul><li>线性阶：O(n)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">tets</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">n</span><span class="token operator">:</span>number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 长度为n的数组的复杂度 为O(n)</span>
  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
  <span class="token comment">//  长度为n 的 列表 复杂度 也为 O(n)</span>
  <span class="token keyword">const</span> <span class="token literal-property property">nodes</span><span class="token operator">:</span>ListNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    nodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//  长度为 n 的 哈希表 也是O(n)</span>
  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对数阶 O(log n)</li><li>平方阶 O(n^2)</li><li>线性对数阶 O(n log n)</li><li>指数阶 O(2^n)</li><li>阶乘阶 O(n!)</li></ul><h2 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h2><blockquote><p>常见的数据结构: 数组、链表、队列、栈、树、图、哈希表、堆</p></blockquote><ul><li><p>线性结构：数组、队列、链表、栈、哈希表</p><ul><li>元素之间是一对一的关系</li></ul></li><li><p>非线性结构：树、图、堆、哈希表</p><ul><li>非线性结构还可以划分为 <ul><li>网状结构：图 <ul><li>元素之间是多对多的关系</li></ul></li><li>树形结构：树、堆、哈希表 <ul><li>元素之间是一对多的关系</li></ul></li></ul></li></ul></li><li><p>算法的运行过程中，数据都是存在内存中的，系统通常是由内存地址来获取内存的数据。</p></li></ul><h3 id="物理结构-连续与分散" tabindex="-1"><a class="header-anchor" href="#物理结构-连续与分散" aria-hidden="true">#</a> 物理结构：连续与分散</h3><blockquote><p>物理结构反映了数据在计算机内存中的存储方式，可以分为连续存储（数组）和分散存储（链表）两种。</p></blockquote><ul><li>所有的数据结构，都是基于数组、链表或者二者结合而来的</li><li>连续存储空间：数组</li><li>分散存储空间：链表</li></ul><h3 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h3><ul><li>基本数据类型是 CPU 可以直接进行运算的类型，主要包括以下几种类型 <ul><li>整数类型：byte、short、int、long</li><li>浮点类型：float、double</li><li>字符类型:char</li><li>布尔类型：bool</li></ul></li><li>基本数据类型是以二进制的形式存储在计算机中。</li></ul><blockquote><p>1byte === 7bit</p></blockquote>`,28),o=[t];function p(i,c){return a(),s("div",null,o)}const r=n(e,[["render",p],["__file","data-structure.html.vue"]]);export{r as default};
