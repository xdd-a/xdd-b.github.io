import{_ as l,p as i,q as u,t as a,a2 as e,Y as c,s as n,R as s,n as o}from"./framework-e1bed10d.js";const r={},d=c(`<h2 id="数组-api" tabindex="-1"><a class="header-anchor" href="#数组-api" aria-hidden="true">#</a> 数组 API</h2><ul><li>splice 会修改原数组</li><li>map 不会修改原数组 返回一个新数组</li><li>reduce 累加，返回的是一个值。</li><li>some 一个命中规则 则返回true</li><li>every 每个都命中 返回true</li><li>filter 过滤出符合条件的项 不会修改原数组</li><li>slice 不会修改原数组 返回截取的项</li><li>foreach 不会修改原数组</li><li>push 后增 返回数组长度</li><li>unshift 前增 返回数组长度</li><li>pop 后删 返回删除的项</li><li>shift 前删 返回删除的项</li></ul><h2 id="symbol-toprimitive" tabindex="-1"><a class="header-anchor" href="#symbol-toprimitive" aria-hidden="true">#</a> Symbol.toPrimitive</h2><ul><li>当进行强制类型转换的时候，会执行这个方法，只有对象转原始的时候会执行</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toPrimitive<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">hint</span><span class="token operator">:</span> number <span class="token operator">|</span> string <span class="token operator">|</span> <span class="token keyword">default</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hint<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">33</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token operator">+</span>c <span class="token comment">// 33</span>
c <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// 34</span>
<span class="token comment">// 他都会执行 Symbol.toPrimitive 这个方法 并将返回值当成计算值。</span>
<span class="token comment">// hint 是类型，</span>
<span class="token comment">// 强制数字类型转换时，hint 就是 number</span>
<span class="token comment">// 强制字符串类型转换时，hint 就是 string</span>
<span class="token comment">// 强制原始类型转换时，hint 就是 default</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当没有[@@toPrimitive] 属性时会以不同顺序调用 <code>valueOf</code> 和 <code>toString</code></li></ul><h2 id="变量提升-函数提升" tabindex="-1"><a class="header-anchor" href="#变量提升-函数提升" aria-hidden="true">#</a> 变量提升 &amp; 函数提升</h2><ul><li>变量提升会将变量的声明提升到当前作用域的最顶端。</li></ul>`,8),k=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// - 变量提升"),s(`
`),n("span",{class:"token comment"},"//   - var、const、let 都有变量提升，只是他们提升的方式不同"),s(`
`),n("span",{class:"token comment"},"//     - var 会将声明提升到当前作用域的最顶端"),s(`

`),n("span",{class:"token operator"},"-"),s(" 例子"),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token keyword"},"var"),s(" name "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"JavaScript"'),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"showName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("name"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
   `),n("span",{class:"token keyword"},"var"),s(" name "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"CSS"'),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token function"},"showName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
这里的name打印的是`),n("span",{class:"token keyword"},"undefined"),s("，是因为他优先会找的是当前执行上下文里的变量，"),n("span",{class:"token keyword"},"var"),s(" name "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"'css'"),s(" 会将"),n("span",{class:"token keyword"},"var"),s(" name 优先提升到"),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"showName"),n("span",{class:"token template-punctuation string"},"`")]),s("内部的最顶端，所以打印的是"),n("span",{class:"token keyword"},"undefined"),s(`

`),n("span",{class:"token operator"},"-"),s(" 例子"),n("span",{class:"token number"},"2"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"test"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" name "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" name "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"2"),s(`
        console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("name"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"//2"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("name"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"//1"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token operator"},"-"),s(" 因为 "),n("span",{class:"token keyword"},"let"),s(" 有块级作用域，所以 name2 是在"),n("span",{class:"token keyword"},"if"),s(`块内部声明的，不会提升到test顶部，所以第二个name读的是test内部的name1

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),m=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[s(`函数的声明方式有两种
`),n("span",{class:"token number"},"1"),s(`、
   `),n("span",{class:"token function"},"fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
   `),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"fn"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`
   `),n("span",{class:"token punctuation"},"}"),s(`
    等同于
    `),n("span",{class:"token keyword"},"var"),s(" fn"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 会报错 undefined不是一个函数 fn is not function"),s(`
    `),n("span",{class:"token function-variable function"},"fn"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
    变量形式的声明方式 与变量提升行为一致。

`),n("span",{class:"token number"},"2"),s(`、
   `),n("span",{class:"token function"},"fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// 2"),s(`
   `),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),s(`
   `),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=n("h2",{id:"数组-or-对象-当做参数传递时-直接修改值",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数组-or-对象-当做参数传递时-直接修改值","aria-hidden":"true"},"#"),s(" 数组 or 对象 当做参数传递时，直接修改值")],-1),b=n("ul",null,[n("li",null,"在 js 中，函数的参数是值传递，但如果是对象的话，那就是引用传递，"),n("li",null,"数组当做参数时，重新赋值，相当于将函数内部的变量重新指向了新的地址，而不会影响到原始数据。"),n("li",null,"对象当做参数时，直接修改对象的其中一个 key 的 value 时，因为是引用传递，他是同一个地址，所以会更改原始数据。")],-1),g=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"test"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"arr"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
arr `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"const"),s(" a "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token function"},"test"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token comment"},'// 当传递的是一个数组的时候，函数内部去重新赋值，并不会影响外部的a，除非直接修改下标对应的值 arr[0] = "a"'),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"test"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"a"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    a`),n("span",{class:"token punctuation"},"."),s("arr "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"const"),s(" a "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token literal-property property"},"arr"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token function"},"test"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// a.arr [4,5,6]"),s(`
`),n("span",{class:"token comment"},"// 当传递的是一个对象的时候，他指向的是同一个地址，所以修改会影响原始数据。"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=c(`<h2 id="map-数据结构" tabindex="-1"><a class="header-anchor" href="#map-数据结构" aria-hidden="true">#</a> Map 数据结构</h2><ul><li>任何具有 Iterator 接口，且成员是一个双元素数组的数据结构，都可以当做 Map 构造函数的参数。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 张三</span>


<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> map1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span>
map1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>map的key 如果是引用类型的话，他们的引用地址应该是同一个，否则的话会获取不到</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// undefined 尽管[&#39;a&#39;] 都是一样的 但是他们在内存中的地址是不同的 所以获取不到。</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>同一个key 的 map 后者会覆盖前者</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>

map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// false</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>map 去访问一个不存在的键时，会得到undefined</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> map  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;asdasd&#39;</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果 Map 的键是基本类型时，只要保证键严格相等，那么就会被视为同一个键，NaN尽管不相等，但是 Map 也将视为同一个键</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>

map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;true&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">//1</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;true&#39;</span><span class="token punctuation">)</span> <span class="token comment">//2</span>

map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>

map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>

map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">//1</span>



</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="set-数据结构" tabindex="-1"><a class="header-anchor" href="#set-数据结构" aria-hidden="true">#</a> Set 数据结构</h2><ul><li>set 构造函数可以接受一个数组或者具有 iterable 接口的 其他类型</li><li>set 通过 add方法添加值，并且不会重复</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> set  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token operator">=&gt;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">set</span> <span class="token comment">// [1,2,3,4]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>set 添加值的时候 是通过 === 来比较的，他不会进行类型转换。NaN 除外， set认为他是相等的。</li></ul><h2 id="module-语法" tabindex="-1"><a class="header-anchor" href="#module-语法" aria-hidden="true">#</a> Module 语法</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 运行时加载，只有运行时才能得到fs对象，没有办法在编译时做静态优化</span>
<span class="token comment">// 会加载fs整个模块</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> stat<span class="token punctuation">,</span> exists <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span> <span class="token comment">// commonJS 模块</span>
<span class="token comment">// 等同于</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> stat <span class="token operator">=</span> fs<span class="token punctuation">.</span>stat
<span class="token keyword">const</span> exists  <span class="token operator">=</span> fs<span class="token punctuation">.</span>exists

<span class="token comment">// 从fs模块上加载2个方法 其他不加载。</span>
<span class="token comment">// 在编译时就加载了，比commonJS 要快</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> stat<span class="token punctuation">,</span> exists<span class="token punctuation">}</span>  <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>export 必须提供对外的接口，不能直接输出值。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token keyword">export</span> <span class="token number">1</span>

<span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">export</span> m 
<span class="token comment">// 以上两种方式都会报错，</span>

<span class="token comment">// 正确的写法</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> m
<span class="token keyword">export</span> <span class="token punctuation">{</span> m <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>import 命令 输入的变量都是只读的，因此无法更改他，但是如果 输入的变量是一个对象的话 那么更改他是合法的</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>a<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./test&#39;</span>
a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 报错</span>

a<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 正确</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>import 具有提升效果，会提升到整个模块的最顶部。</li><li>import 是静态执行的，因此无法进行表达式与变量操作，这些只能在运行时的才能得到结果的操作是不被允许的</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span><span class="token string">&#39;f&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;po&#39;</span><span class="token punctuation">}</span>  <span class="token keyword">from</span> <span class="token string">&#39;a&#39;</span>

<span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>a<span class="token punctuation">}</span> from module

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">import</span> <span class="token punctuation">{</span>a<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;test&#39;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">import</span> <span class="token punctuation">{</span>b<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;test&#39;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 以上操作都是不被允许的，会报错。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>export default 本质就是输出一个叫做 <code>default</code> 的变量，所以他后面不能跟变量声明语句</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// good</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">export</span> <span class="token keyword">default</span>  a<span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token number">43</span>

<span class="token comment">// bad</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token number">43</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>import() 可以进行动态的加载，什么时候执行到他，就什么时候加载,他返回的是一个promise对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;/test.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    module<span class="token punctuation">.</span>xxx
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    xxx <span class="token operator">=</span> err<span class="token punctuation">.</span>msg<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es6-模块-与-commonjs-模块的区别" tabindex="-1"><a class="header-anchor" href="#es6-模块-与-commonjs-模块的区别" aria-hidden="true">#</a> ES6 模块 与 CommonJS 模块的区别</h2><ul><li>CommonJS 模块 输出的是一个值的拷贝， ES6 模块输出的是值的引用 <ul><li>CommonJS 一旦输出了这个值，模块内部的变化，不会影响到这个值。</li><li>加载了一个原始类型的值，会被缓存，除非写成函数形式，才可以得到修改后的值。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// lib.js</span>
<span class="token keyword">var</span> count  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> count<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    count<span class="token punctuation">,</span>
    setCount<span class="token punctuation">,</span>
    <span class="token keyword">get</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> count
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">// main.js</span>
<span class="token keyword">var</span> md <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;lib.js&#39;</span><span class="token punctuation">)</span>
md<span class="token punctuation">.</span>count <span class="token comment">// 0</span>
md<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
md<span class="token punctuation">.</span>count <span class="token comment">// 0</span>
md<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>- ES6 模块 遇到 \`import\` 时，就会生成一个只读的引用，到脚本真正执行的时候，会去被加载的模块中获取值。
- 因此 ES6 是动态引用的，不会被缓存。
- 所以，ES6 模块， 如果对变量进行重新赋值的话，是会报错的，因为地址是只读的不可更改。
</code></pre><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">var</span> count  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> count<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">// main.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> count<span class="token punctuation">,</span> setCount<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;lib.js&#39;</span>
count <span class="token comment">// 0</span>
<span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
count <span class="token comment">// 1</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>CommonJS 模块 是运行时加载，ES6 模块是编译时输出接口</li><li>CommonJS 模块的 <code>require()</code> 是同步加载模块， ES6 模块的 <code>import</code> 是异步加载，有一个独立的模块依赖的解析阶段。</li><li>CommonJS 模块想要加载ES6模块</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;test.mjs&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ES6 模块 加载 CommonJS 模块，只能整体加载，不能加载单一项。 <ul><li>因为 ES6 需要支持静态代码分析，而 CommonJS 模块 输出的是一个对象，无法被静态分析，所以只能整体加载。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// good</span>
<span class="token keyword">import</span> test <span class="token keyword">from</span> <span class="token string">&#39;test&#39;</span>

<span class="token comment">// bad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>test <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;test&#39;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>CommonJS &amp; AMD 模块都是运行时，，ES6 是编译时就能确定要输出，输入的变量等</li></ul><h2 id="sessionstorage-可以在多个标签页共享数据吗" tabindex="-1"><a class="header-anchor" href="#sessionstorage-可以在多个标签页共享数据吗" aria-hidden="true">#</a> sessionStorage 可以在多个标签页共享数据吗？</h2><ul><li>sessionStorage 不可以在多个标签页共享数据，但是如果是用过 <code>window.open</code> 打开的标签页且不是 <code>__blank</code> 的时候，他会复制一份 sessionStorage 到新的页面。</li></ul><h2 id="promise面试题" tabindex="-1"><a class="header-anchor" href="#promise面试题" aria-hidden="true">#</a> Promise面试题</h2><ul><li><p>当调用promise的then方法的时候 会做两件事情，</p><ul><li>1、如果promise 是已完成的状态，那么then的回调函数会被推入微队列。</li><li>2、看是不是会返回一个新的promise，返回的promise 是什么状态，取决于回调函数的运行过程，如果回调函数运行过程没有报错，那就是 <code>fulfilled</code> 完成，反之 <code>rejected</code>失败</li></ul></li><li><p>当 then方法中 返回了一个promise的时候，then的状态取决于 返回的这个promise的状态。</p><ul><li>如何保持状态一致呢？ <ul><li>1、他把保持状态一致的事情，放到一个then里面，然后将这个then推入微队列</li></ul></li></ul></li><li><p>1、p0因为是resolve 已完成的状态，所以将 then 推入微队列</p><ul><li>微队列有<code>p0</code></li></ul></li><li><p>2、res 因为 前一个p0 还没有执行完成，还是 pending 状态 所以先不管 res</p></li><li><p>3、p1 因为是resolve 已完成的状态，所以将then 推入微队列</p><ul><li>微队列有<code>p0</code>、<code>p1</code></li></ul></li><li><p>4、后续不管，因为p1 状态是 pending</p></li><li><p>5、微队列中取出p0，因为返回了一个 promise 所以p0的状态取决于 返回的promise 并且 将其放入then中 也就是 p4.then(()=&gt;完成p0)</p><ul><li>打印0</li><li>微队列中有 <code>p1</code>、 <code>p4.then(()=&gt;完成p0)</code></li></ul></li><li><p>6、因为p0还是pending 所以 res 还不管， 接下来取出p1，p1执行完成之后状态变为已完成，将p2推入微队列</p><ul><li>打印1</li><li>微队列中有 <code>p4.then(()=&gt;完成p0)</code>、<code>p2</code></li></ul></li><li><p>7、取出 <code>p4.then(()=&gt;完成p0)</code> p4状态是resolve，将<code>完成p0</code> 推入微队列</p><ul><li>微队列有 <code>p2</code>、<code>完成p0</code></li></ul></li><li><p>8、 取出<code>p2</code>，执行完成之后状态变为已完成，将p3推入微队列</p><ul><li>打印2</li><li>微队列有 <code>完成p0</code>、<code>p3</code></li></ul></li><li><p>9、取出 <code>完成p0</code>, p0执行完成，将 <code>res</code> 推入微队列</p><ul><li>微队列中有 <code>p3</code>、<code>res</code></li></ul></li><li><p>10、取出 <code>p3</code>，p3执行完成之后状态变为已完成,将p5推入微队列</p><ul><li>打印3</li><li>微队列中有 <code>res</code>、<code>p5</code></li></ul></li><li><p>11、取出<code>res</code></p><ul><li>打印 4</li><li>微队列中有 <code>p5</code></li></ul></li><li><p>12、 取出p5</p><ul><li>打印 5</li></ul></li><li><p>最终打印顺序为 0、1、2、3、4、5</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="class-基础知识" tabindex="-1"><a class="header-anchor" href="#class-基础知识" aria-hidden="true">#</a> class 基础知识</h2><ul><li>static 声明的变量和方法 属于静态的，只能被类调用，不能被实例调用，实例调用会报错。</li><li>class 内部 可以通过 get set 关键字，来给字段的读写增加拦截</li><li>私有属性，只能在类的内部使用，外部无法使用，通过#来定义 例如: this.#count = 0;</li><li>父类的所有方法都会被子类继承，除了私有属性和方法，子类调用的话会报错。</li><li>super 关键字可以做为方法，表示调用父类的构造函数，也可以作为对象，在普通方法中指向父类的原型，在静态方法中，指向父类</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>
    <span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;父类的p&#39;</span><span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span><span class="token string">&#39;父类&#39;</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// {p:f}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="instanceof-typeof-有什麼區別" tabindex="-1"><a class="header-anchor" href="#instanceof-typeof-有什麼區別" aria-hidden="true">#</a> instanceof typeof 有什麼區別</h2><ul><li>instanceof 只能比较对象，判断依据是原型链查找</li><li>typeof 将 <code>null</code>、<code>Object</code>、<code>Array</code>、<code>promise</code>等都看做 <code>object</code></li></ul>`,47);function y(w,j){const t=o("CodeGroupItem"),p=o("CodeGroup");return i(),u("div",null,[d,a(p,null,{default:e(()=>[a(t,{title:"变量提升"},{default:e(()=>[k]),_:1}),a(t,{title:"函数提升"},{default:e(()=>[m]),_:1})]),_:1}),v,b,a(p,null,{default:e(()=>[a(t,{title:"数组"},{default:e(()=>[g]),_:1}),a(t,{title:"对象"},{default:e(()=>[f]),_:1})]),_:1}),h])}const _=l(r,[["render",y],["__file","js.html.vue"]]);export{_ as default};
