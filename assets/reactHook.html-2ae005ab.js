import{_ as n,p as s,q as a,Y as e}from"./framework-e1bed10d.js";const t={},p=e(`<h3 id="usecallback" tabindex="-1"><a class="header-anchor" href="#usecallback" aria-hidden="true">#</a> useCallback</h3><p>用法：<code>const calledFn = useCallback(fn, [...deps]);</code></p><p>注意：<code>useCallback</code> 缓存的是 <code>fn</code> 函数，并不会调用该 <code>fn</code> 回调函数。</p><p><strong>为什么会用 <code>useCallback</code>？</strong></p><blockquote><p>案例：https://code.juejin.cn/pen/7314937599994134537</p></blockquote><p>根据案例中的场景，我们有一个容器组件包括：切换主题、复杂的表单功能，在我们切换主题时并不会操作表单的功能，我们不希望表单组件进行重新渲染，但是如果我们不做任何处理它作为子组件的情况下还是会进行重新渲染；这是因为我们不使用 <code>useCallback</code> 包裹函数的情况下，每次重新渲染会使函数成为一个新的函数，那这就造成了表单组件的重新渲染。换句话说使用了 <code>useCallback</code> 包裹的函数在依赖项不改变的情况下使用的总是缓存的函数。</p><h3 id="usedeferredvalue" tabindex="-1"><a class="header-anchor" href="#usedeferredvalue" aria-hidden="true">#</a> useDeferredValue</h3><p>用法：</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>query<span class="token punctuation">,</span> setQuery<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> deferredQuery <span class="token operator">=</span> <span class="token function">useDefferedValue</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>为什么会用 <code>useDeferredValue</code>？</strong></p><p>想象一下我们有一个搜索框，用户在搜索框输入值会搜索相对应的值，如果使用 <code>state</code> 的话，那么每次输入都会触发重新渲染，项目小还没啥影响如果项目过大，那么卡顿感将会被放大。此时便可以使用 <code>useDeferredValue</code> 来实现类似防抖和节流的效果。</p><h3 id="useeffect" tabindex="-1"><a class="header-anchor" href="#useeffect" aria-hidden="true">#</a> useEffect</h3><p>用法：</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// setup</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// cleanup</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token comment">/*依赖项*/</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>关于依赖项：</strong></p><ul><li>不填（指不写<code>useEffect</code>第二个参数），那么每次重新渲染都会执行 Effect</li><li>为空数组的，只有在 <code>mount</code> 阶段执行 <code>setup</code> 逻辑，<code>unmount</code> 阶段执行 <code>cleanup</code> 逻辑</li><li>填写响应式依赖，在 <code>mount</code> 阶段执行 <code>setup</code> 逻辑，每次响应式值改变先执行 <code>cleanup</code> 逻辑，后执行 <code>setup</code> 逻辑，<code>unmount</code> 阶段执行 <code>cleanup</code> 逻辑</li></ul><p><strong>关于数据请求：</strong></p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 切换 person state 来请求最新数据</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>person<span class="token punctuation">,</span> setPerson<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;xdd&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>list<span class="token punctuation">,</span> setList<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 使用 .then 方式</span>
<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token function">fetchData</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setList</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    flag <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>person<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">// 使用 async await 方式</span>
<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchData</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setList</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    flag <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>person<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在数据请求中需要注意，<code>useEffect</code> 的第一个参数不允许是 <code>Promise</code>，如果要写 <code>async</code> 需要在内部单独定义函数；关于为什么要定义 <code>flag</code> 变量，是因为请求数据是异步的假如在请求还未完成时执行了意外的操作（例如组件卸载），那么数据就不该被设置到 <code>state</code> 中。</p><p><strong>Effect 生命周期：</strong></p><p><code>mount</code> 阶段：</p><ul><li>初始化变量</li><li>渲染 DOM</li><li>执行 <code>Effect setup</code> 逻辑</li></ul><p><code>update</code> 阶段：</p><ul><li>渲染 DOM</li><li>执行 <code>Effect cleanup</code> 逻辑</li><li>执行 <code>Effect setup</code> 逻辑</li></ul><p><code>unmount</code> 阶段：</p><ul><li>执行 <code>Effect cleanup</code> 逻辑</li></ul><h3 id="useimperativehandle" tabindex="-1"><a class="header-anchor" href="#useimperativehandle" aria-hidden="true">#</a> useImperativeHandle</h3><p>用于和 <code>forwardRef</code> 一起使用，暴露出元素部分重要的方法</p><p>案例：https://code.juejin.cn/pen/7317177764723818522</p><h3 id="useinsertioneffect" tabindex="-1"><a class="header-anchor" href="#useinsertioneffect" aria-hidden="true">#</a> useInsertionEffect</h3><p>在组件渲染期间注入样式</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useInsertionEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>color<span class="token punctuation">,</span> setColor<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;blue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token function">useInsertionEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 假设 insertStyles 是一个将 CSS 注入到 DOM 的函数</span>
    <span class="token function">insertStyles</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">.my-component { color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; }</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>color<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 依赖项数组中包含 color，确保颜色变化时样式可以更新</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-component<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, World!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="uselayouteffect" tabindex="-1"><a class="header-anchor" href="#uselayouteffect" aria-hidden="true">#</a> useLayoutEffect</h3><p>与 <code>useEffect</code> 类似，不同的是它比 <code>useEffect</code> 生命周期更早并且会阻塞浏览器重绘，这也意味着它的性能较差，所以一般建议使用 <code>useEffect</code>，除非特殊场景。</p><p>例如：https://code.juejin.cn/pen/7317478690915844133</p><h3 id="usememo" tabindex="-1"><a class="header-anchor" href="#usememo" aria-hidden="true">#</a> useMemo</h3><p>用法：</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> cacheValue <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> xx
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>deps<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<code>useMemo</code> 会立即调用函数并缓存结果，但是不要每处都用该 Hook</p><h3 id="usestate" tabindex="-1"><a class="header-anchor" href="#usestate" aria-hidden="true">#</a> useState</h3><p>用法：</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token comment">/**initValue*/</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：<code>initValue</code> 支持任何类型的值，但是函数类型有特殊的行为。只支持纯函数（函数有返回值）并且不允许有参数；React 会存储该初始化的函数结果。</p><p><strong>重置数据小技巧</strong>：给组件设置 <code>key</code>，并且传递 <code>state</code> 值给 <code>key</code>，在需要重置数据时改变 <code>key</code> 值。</p><h3 id="usesyncexternalstore" tabindex="-1"><a class="header-anchor" href="#usesyncexternalstore" aria-hidden="true">#</a> useSyncExternalStore</h3><blockquote><p>React18 中新增的 hook，方便订阅外部数据源的变化。</p></blockquote><p>用法：<code>const snapshot = useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot?)</code></p><h3 id="usetransition" tabindex="-1"><a class="header-anchor" href="#usetransition" aria-hidden="true">#</a> useTransition</h3><p>用法：<code>const [isPending, startTransition] = useTransition()</code></p><p>使用该 hook 不会阻断页面 UI，例如：https://code.juejin.cn/pen/7327947967090917385</p><p>另外，它的执行顺序需要了解下，请看下面的例子：</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code>  <span class="token keyword">const</span> <span class="token punctuation">[</span>isPending<span class="token punctuation">,</span> startTransition<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useTransition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

  <span class="token function">startTransition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token comment">// do something</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它会按照 1、2、3 的顺序打印～</p>`,53),o=[p];function c(u,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","reactHook.html.vue"]]);export{d as default};
