import{_ as s,p as a,q as t,s as n,R as e,Y as p}from"./framework-e1bed10d.js";const o={},l=n("div",{class:"custom-container info"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"INFO"),n("ul",null,[n("li",null,[e("ast 中 type对照表 "),n("ul",null,[n("li",null,"Program：代表整个 JavaScript 程序的根节点"),n("li",null,"FunctionDeclaration / FunctionExpression: 代表函数声明和函数表达式。"),n("li",null,"Identifier: 代表标识符，如变量名、函数名等。"),n("li",null,"VariableDeclaration / VariableDeclarator: 代表变量声明，其中 VariableDeclaration 是包含一个或多个 VariableDeclarator 的父节点。"),n("li",null,"Literal: 代表字面量，如数字、字符串、布尔值等。"),n("li",null,"CallExpression: 代表函数调用。"),n("li",null,"MemberExpression: 代表成员访问，如 object.property 或 object[method]。"),n("li",null,"BinaryExpression: 代表二元表达式，如 a + b 或 a > b。"),n("li",null,"UnaryExpression: 代表一元表达式，如 !a 或 ++b。"),n("li",null,"AssignmentExpression: 代表赋值表达式，如 a = b 或 a += b。"),n("li",null,"BlockStatement: 代表代码块，通常由大括号 {} 包围。"),n("li",null,"IfStatement: 代表 if 条件语句。"),n("li",null,"ForStatement / WhileStatement: 代表 for 循环和 while 循环。"),n("li",null,"DoWhileStatement: 代表 do...while 循环。"),n("li",null,"SwitchStatement: 代表 switch 语句。"),n("li",null,"CaseClause / DefaultClause: 代表 switch 语句中的 case 和 default 分支。"),n("li",null,"ReturnStatement: 代表 return 语句。"),n("li",null,"BreakStatement / ContinueStatement: 代表 break 和 continue 语句，用于控制循环的执行。"),n("li",null,"TryStatement / CatchClause / FinallyBlock: 代表 try...catch...finally 异常处理结构。"),n("li",null,"ThrowStatement: 代表 throw 语句，用于抛出异常。"),n("li",null,"DebuggerStatement: 代表调试器语句，用于断点调试。"),n("li",null,"ThisExpression: 代表 this 关键字。"),n("li",null,"ArrayExpression: 代表数组字面量。"),n("li",null,"ObjectExpression: 代表对象字面量。"),n("li",null,"Property: 代表对象字面量中的属性。"),n("li",null,"SpreadElement: 代表在数组或对象字面量中的扩展操作符 ...。"),n("li",null,"TemplateLiteral: 代表模板字符串。"),n("li",null,"TaggedTemplateExpression: 代表标签模板字符串。"),n("li",null,"ArrowFunctionExpression: 代表箭头函数。"),n("li",null,"ClassDeclaration / ClassExpression: 代表类声明和类表达式。"),n("li",null,"Super: 代表 super 关键字，用于调用父类方法。"),n("li",null,"ImportDeclaration / ExportNamedDeclaration / ExportDefaultDeclaration: 代表 ES6 模块的导入和导出语句。")])])])],-1),i=p(`<h2 id="结构" tabindex="-1"><a class="header-anchor" href="#结构" aria-hidden="true">#</a> 结构</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> text123456789<span class="token punctuation">;</span>
text <span class="token operator">=</span> <span class="token string">&quot;变量名长一点方便辨识&quot;</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Program&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 表示这是一个程序的抽象语法树（AST）的根节点</span>
  <span class="token string-property property">&quot;body&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;VariableDeclaration&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 表示一个变量声明</span>
      <span class="token string-property property">&quot;declarations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;VariableDeclarator&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 表示一个变量声明的具体内容</span>
          <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 表示一个变量的名称</span>
            <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text123456789&quot;</span> <span class="token comment">// 变量名</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token string-property property">&quot;init&quot;</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token comment">// 表示该变量没有初始值</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;kind&quot;</span><span class="token operator">:</span> <span class="token string">&quot;let&quot;</span> <span class="token comment">// 表示使用了 &#39;let&#39; 关键字进行变量声明</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ExpressionStatement&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 表示一个表达式语句</span>
      <span class="token string-property property">&quot;expression&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;AssignmentExpression&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 表示一个赋值表达式</span>
        <span class="token string-property property">&quot;operator&quot;</span><span class="token operator">:</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 赋值操作符</span>
        <span class="token string-property property">&quot;left&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 表示左侧是一个变量</span>
          <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span> <span class="token comment">// 变量名 &#39;text&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;right&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Literal&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 表示右侧是一个字面量</span>
          <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;变量名长一点方便辨识&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 字面量值</span>
          <span class="token string-property property">&quot;raw&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&#39;变量名长一点方便辨识&#39;&quot;</span> <span class="token comment">// 字面量的原始表示形式</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;sourceType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span> <span class="token comment">// 表示这是一个模块类型的源代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> parser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@babel/parser&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> traverse <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@babel/traverse&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>
<span class="token keyword">const</span> generate <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@babel/generator&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>

<span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">parser</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> check <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">visitIdentifier</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&quot;let&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>kind <span class="token operator">=</span> <span class="token string">&quot;const&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用traverse遍历AST并应用访问器，也就是遍历并应用刚才那个 check 规则</span>
<span class="token function">traverse</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> check<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用generate根据修改后的AST生成新的代码</span>
<span class="token keyword">const</span> output <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),c=[l,i];function r(u,k){return a(),t("div",null,c)}const v=s(o,[["render",r],["__file","ast.html.vue"]]);export{v as default};
