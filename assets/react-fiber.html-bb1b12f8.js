import{_ as e,p as i,q as t,Y as c}from"./framework-e1bed10d.js";const r="/assets/image-1fb44aa2.png",a={},l=c('<p><a href="%22https://juejin.cn/post/7258881840823844920%22">参考文献</a><a href="%22https://juejin.cn/post/7331135154209308687%22">参考文献</a></p><h2 id="fiber-讲解" tabindex="-1"><a class="header-anchor" href="#fiber-讲解" aria-hidden="true">#</a> fiber 讲解</h2><h3 id="fiber-形成" tabindex="-1"><a class="header-anchor" href="#fiber-形成" aria-hidden="true">#</a> fiber 形成</h3><ul><li>react fiber 采用链表的形式实现的，每个虚拟dom 都可以理解为是一个 fiber</li><li><img src="'+r+'" alt="alt text"></li><li>每个节点都是一个 fiber， 包含 <code>child 第一个节点</code>、 <code>sibling 兄弟节点</code>、 <code>return 父节点</code>。</li><li>在首次渲染的时候，会创建一个 <code>FiberRoot</code> 整个应用根节点 和 <code>rootFiber</code> 组件的根节点</li><li>在 React 中 最多存在两颗 fiber树， 一颗是当前展示的 <code>current Fiber</code>、另一颗是 正在内存中构建的 <code>workInProgress fiber树</code></li></ul><h2 id="effect-list-副作用列表" tabindex="-1"><a class="header-anchor" href="#effect-list-副作用列表" aria-hidden="true">#</a> Effect list 副作用列表</h2><ul><li>在 React 中，<code>修改 DOM</code>、<code>发送网络请求</code>、<code>更新状态</code>等，都会有副作用，为了确保副作用的操作都在适当的时机，fiber 会形成一个 effect list 来收集和管理副作用</li><li>effect list 包含以下信息 <ul><li>副作用类型 effect type: 表示该节点对应的副作用操作类型，如 更新dom</li><li>副作用标记 Tag：表示该节点的状态，如 更新（update）、删除（Deletion）、新增（Placement）</li><li>目标对象 Target: 执行副作用具体的操作对象，比如要更新的DOM，或者要发送请求的接口。</li></ul></li><li></li></ul>',6),o=[l];function d(f,s){return i(),t("div",null,o)}const h=e(a,[["render",d],["__file","react-fiber.html.vue"]]);export{h as default};
