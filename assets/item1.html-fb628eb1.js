import{_ as e,p as o,q as c,s as n,R as s,t,Y as p,n as i}from"./framework-e1bed10d.js";const l={},r=n("p",null,"如果你使用 TypeScript 很长时间的话，你一定听说过“TypeScript 是 JavaScript 的超集”或者说“TypeScript 是 JavaScript 的类型超集”。但是你真的知道这是什么意思吗？那么到底 TypeScript 和 JavaScript 的关系是什么？",-1),u=n("p",null,"由于这些语言密切相关，因此深入了解它们与每种语言的关系是很好使用 TypeScript 的基础。",-1),d={href:"https://www.yuque.com/xdda/ge8hhi/zlfgb79me4quzi6v",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,".ts",-1),m=n("code",null,".tsx",-1),v=n("code",null,".js",-1),y=n("code",null,".jsx",-1),b=n("code",null,".js",-1),g=n("code",null,"main.js",-1),S=n("code",null,"main.ts",-1),h={href:"https://www.yuque.com/xdda/ge8hhi/eymgsd800ogy0bgf",target:"_blank",rel:"noopener noreferrer"},T={href:"https://www.yuque.com/xdda/ge8hhi/ta7tgb0209ovwbe3",target:"_blank",rel:"noopener noreferrer"},f=p(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span>who<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> who<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是当你通过像 node 这样需要 JavaScript 的程序运行它时，你会得到一个错误：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span>who<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      <span class="token operator">^</span>
SyntaxError<span class="token operator">:</span> Unexpected token <span class="token operator">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>:string</code> 是 TypeScript 的类型注释，一旦你使用了一个，你已经超越了普通 JavaScript。（参考图 1-1）</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/12390816/1676012227263-3bd447b8-d3af-434e-b94f-4602f2d84765.png#averageHue=%23e2eaef&amp;clientId=u5da513ca-4d61-4&amp;from=paste&amp;height=319&amp;id=u857d7790&amp;name=image.png&amp;originHeight=638&amp;originWidth=1078&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=164001&amp;status=done&amp;style=none&amp;taskId=u1232677e-2401-4e55-ac8d-eab1f816916&amp;title=图 1-1：所有的 JavaScript 程序都是 TypeScript 程序，所有的 TypeScript 程序并非是 JavaScript 程序。&amp;width=539" alt="image.png" title="图 1-1：所有的 JavaScript 程序都是 TypeScript 程序，所有的 TypeScript 程序并非是 JavaScript 程序。"> 并不是说 TypeScript 不为普通 JavaScript 提供价值。它可以！例如下面的 JavaScript 代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> city <span class="token operator">=</span> <span class="token string">&#39;new york city&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>city<span class="token punctuation">.</span><span class="token function">toUppercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 当你运行它时将会抛出以下错误</span>

<span class="token comment">// TypeError: city.toUppercase is not a function</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该程序中没有类型注释，但 TypeScript 的类型检查器仍然能够发现问题：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> city <span class="token operator">=</span> <span class="token string">&#39;new york city&#39;</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>city<span class="token punctuation">.</span><span class="token function">toUppercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token comment">// ~~~~~~~~~~~ Property &#39;toUppercase&#39; does not exist on type</span>
               <span class="token comment">//             &#39;string&#39;. Did you mean &#39;toUpperCase&#39;?</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),_=n("code",null,"string:",-1),w={href:"https://www.yuque.com/xdda/ge8hhi/rh25hgsx658bezyk",target:"_blank",rel:"noopener noreferrer"},J=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> states <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Alabama&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">capital</span><span class="token operator">:</span> <span class="token string">&#39;Montgomery&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Alaska&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">capital</span><span class="token operator">:</span> <span class="token string">&#39;Juneau&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Arizona&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">capital</span><span class="token operator">:</span> <span class="token string">&#39;Phoenix&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> state <span class="token keyword">of</span> states<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>capitol<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// log</span>
<span class="token comment">// undefined</span>
<span class="token comment">// undefined</span>
<span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>哎呀！什么地方出了错？该程序是有效的 JavaScript（因此也是 TypeScript）。它运行时没有抛出任何错误。但它显然没有达到你的预期。即使不添加类型注释，TypeScript 的类型检查器也能够发现错误（并提供有用的建议）：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> state <span class="token keyword">of</span> states<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>capitol<span class="token punctuation">)</span><span class="token punctuation">;</span>
                   <span class="token comment">// ~~~~~~~ Property &#39;capitol&#39; does not exist on type</span>
                   <span class="token comment">//         &#39;{ name: string; capital: string; }&#39;.</span>
                   <span class="token comment">//         Did you mean &#39;capital&#39;?</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然即使你不提供类型注释，TypeScript 也可以捕获错误，但如果你提供类型注释，它就能更彻底的完成工作。这是因为类型注解告诉 TypeScript 你的意图是什么，这让它能够发现代码行为与你的意图不匹配的地方。例如，如果你在前面的例子中反转了 capital/capitol 的拼写错误会怎样？</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> states <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;Alabama&#39;</span><span class="token punctuation">,</span> capitol<span class="token operator">:</span> <span class="token string">&#39;Montgomery&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;Alaska&#39;</span><span class="token punctuation">,</span> capitol<span class="token operator">:</span> <span class="token string">&#39;Juneau&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;Arizona&#39;</span><span class="token punctuation">,</span> capitol<span class="token operator">:</span> <span class="token string">&#39;Phoenix&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> state <span class="token keyword">of</span> states<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>capital<span class="token punctuation">)</span><span class="token punctuation">;</span>
                   <span class="token comment">// ~~~~~~~ Property &#39;capital&#39; does not exist on type</span>
                   <span class="token comment">//         &#39;{ name: string; capitol: string; }&#39;.</span>
                   <span class="token comment">//         Did you mean &#39;capitol&#39;?</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之前非常有用的错误现在完全错了！问题是你用两种不同的方式拼写了同一个属性，而 TypeScript 不知道哪一个是正确的。它可以猜测，但不一定总是正确的。解决方案是通过明确声明 <code>State</code> 类型来阐明你的意图：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  capital<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> states<span class="token operator">:</span> State<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
<span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;Alabama&#39;</span><span class="token punctuation">,</span> capitol<span class="token operator">:</span> <span class="token string">&#39;Montgomery&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token comment">// ~~~~~~~~~~~~~~~~~~~~~</span>
<span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;Alaska&#39;</span><span class="token punctuation">,</span> capitol<span class="token operator">:</span> <span class="token string">&#39;Juneau&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  							<span class="token comment">// ~~~~~~~~~~~~~~~~~</span>
<span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;Arizona&#39;</span><span class="token punctuation">,</span> capitol<span class="token operator">:</span> <span class="token string">&#39;Phoenix&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
								<span class="token comment">// ~~~~~~~~~~~~~~~~~~ Object literal may only specify known</span>
               	<span class="token comment">//         properties, but &#39;capitol&#39; does not exist in type</span>
               	<span class="token comment">//         &#39;State&#39;.  Did you mean to write &#39;capital&#39;?</span>
<span class="token comment">// ...</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> state <span class="token keyword">of</span> states<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>capital<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在错误与问题匹配，建议的修复是正确的。通过阐明我们的意图，你还帮助 TypeScript 发现了其他潜在问题。例如，在数组中只拼写错一次 capitol ，那么在之前的代码中就不会报错。但是用了类型注解后：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> states<span class="token operator">:</span> State<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
<span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;Alabama&#39;</span><span class="token punctuation">,</span> capital<span class="token operator">:</span> <span class="token string">&#39;Montgomery&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;Alaska&#39;</span><span class="token punctuation">,</span> capitol<span class="token operator">:</span> <span class="token string">&#39;Juneau&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
               <span class="token comment">// ~~~~~~~~~~~~~~~~~ Did you mean to write &#39;capital&#39;?</span>
<span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;Arizona&#39;</span><span class="token punctuation">,</span> capital<span class="token operator">:</span> <span class="token string">&#39;Phoenix&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token comment">// ...</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据上文，我们可以在维恩图中添加一组新的程序：通过类型检查器的 TypeScript 程序（见图 1-2）。 <img src="https://cdn.nlark.com/yuque/0/2023/png/12390816/1676027245434-3b90782d-f90d-4873-9221-9ebe46bc1114.png#averageHue=%23e0e9f0&amp;clientId=u5da513ca-4d61-4&amp;from=paste&amp;height=329&amp;id=u717b7254&amp;name=image.png&amp;originHeight=658&amp;originWidth=1610&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;size=241334&amp;status=done&amp;style=none&amp;taskId=uc6437cf0-f007-43ba-b356-caa377b8bc8&amp;title=图 1-2：所有 JavaScript 程序都是 TypeScript 程序。但是只有一些 JavaScript（和 TypeScript）程序通过了类型检查器。&amp;width=805" alt="image.png" title="图 1-2：所有 JavaScript 程序都是 TypeScript 程序。但是只有一些 JavaScript（和 TypeScript）程序通过了类型检查器。"> 如果“TypeScript 是 JavaScript 的超集”的说法对你来说是错误的，那可能是因为你正在考虑图表中的第三组程序。在实践中，这是与使用 TypeScript 的日常体验最相关的。通常在你使用 TypeScript 中，你尝试保持你的代码通过所有的类型校验。 TypeScript 的类型系统模拟 JavaScript 的运行时行为。如果你来自具有更严格运行时检查的语言，这可能会带来一些惊喜。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Ok, type is string</span>
<span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token string">&#39;2&#39;</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// Ok, type is string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这些语句都通过了类型检查器，尽管它们有问题，并且确实会在许多其他语言中产生运行时错误。但这模拟了 JavaScript 的运行时行为，其中两个表达式都会产生字符串“23”。 不过，TypeScript 在某个地方划清了界线。类型检查器在所有这些语句中标记问题，即使它们在运行时不会抛出异常：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment">// Evaluates to 7 in JS</span>
       <span class="token comment">// ~~~~ Operator &#39;+&#39; cannot be applied to types ...</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment">// Evaluates to &#39;12&#39; in JS</span>
			 <span class="token comment">// ~~~~~~~ Operator &#39;+&#39; cannot be applied to types ... </span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;TypeScript&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// alerts &quot;Hello&quot;</span>
            <span class="token comment">// ~~~~~~~~~~~~ Expected 0-1 arguments, but got 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TypeScript 类型系统的指导原则是它应该对 JavaScript 的运行时行为进行模拟。但是在所有的例子中，TypeScript 认为奇怪的用法比开发人员的意图更有可能是错误的结果，因此它超越了模拟运行时行为。我们在 capital/ capitol 示例中看到了另一个这方面的例子，其中程序没有抛出异常（它记录了 undefined），但类型检查器仍然标记错误。 TypeScript 如何决定何时对 JavaScript 的运行时行为进行模拟，以及何时超越它？归根结底，这是一个品味问题。通过采用 TypeScript，你相信构建它的团队的判断力。如果你喜欢添加 null 和 7 或 [] 和 12，或调用具有多余参数的函数，那么TypeScript 可能不适合你！ 如果你的程序有类型检查，它仍然可以在运行时抛出错误吗？答案是“是”。这里有一个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,15),x={href:"https://www.yuque.com/xdda/ge8hhi/my56ulylxa8351ga",target:"_blank",rel:"noopener noreferrer"},j={href:"https://www.yuque.com/xdda/ge8hhi/khe0gdfhz2y73v4g",target:"_blank",rel:"noopener noreferrer"},q=n("h2",{id:"值得注意的事情",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#值得注意的事情","aria-hidden":"true"},"#"),s(" 值得注意的事情")],-1),A=n("ul",null,[n("li",null,"TypeScript 是 JavaScript 的超集。换句话说，所有 JavaScript 程序都是 TypeScript 程序。TypeScript 有自己的语法，因此 TypeScript 程序 通常不是有效的 JavaScript 程序。"),n("li",null,"TypeScript 添加了一个类型系统，可以模拟 JavaScript 的运行时行为，并尝试发现将在运行时抛出异常的代码。但是你不能指望它标记每一个异常。代码可以通过类型检查器，但仍然可能在运行时抛出异常。"),n("li",null,"虽然 TypeScript 的类型系统在很大程度上模拟了 JavaScript 行为，存在 JavaScript 允许一些结构，但 TypeScript 选择禁止，例如参数数量错误的调用函数。这在很大程度上是品位问题。")],-1);function z(E,U){const a=i("ExternalLinkIcon");return o(),c("div",null,[r,u,n("p",null,[s("在语法意义上，TypeScript 是 JavaScript 的超集；只要你的 JavaScript 程序没有任何语法错误，那么它也是一个 TypeScript 程序。TypeScript 的类型检查器很可能会标记代码的一些问题。但是这是一个独立的问题。TypeScript 仍然会解析你的代码并且产出 JavaScript。（关于 TypeScript 与 JavaScript 另一部分的关键点，我们将在"),n("a",d,[s("条目 3"),t(a)]),s(" 中探索。）")]),n("p",null,[s("TypeScript 文件使用 "),k,s(" 或者 "),m,s(" 作为后缀，而 JavaScript 文件使用 "),v,s(" 或者 "),y,s(" 作为后缀。当然，这并不意味着 TypeScript 是一种完全不同的语言！由于 TypeScript 是 JavaScript 的超集，因此 "),b,s(" 文件中的代码已经是 TypeScript。将 "),g,s(" 重命名为 "),S,s(" 不会改变这一点。 如果你要将现有的 js 代码库迁移到 ts，这将会非常有用。这意味着你不必用另一种语言重写任何代码就可以开始使用 TypeScript 并获得它提供的好处。如果你选择用 Java 等语言重写 JavaScript，情况并非如此。这种平缓的迁移路径是 TypeScript 的最佳特性之一。更多内容在"),n("a",h,[s("第 8 章"),t(a)]),s("中寻找。 可以这样说，**所有的 JavaScript 程序都是 TypeScript 程序，所有的 TypeScript 程序并非是 JavaScript 程序。**这是因为 TypeScript 添加了额外的语法来指定类型。（它添加了一些其他语法，主要是出于历史原因。参见"),n("a",T,[s("条目 53"),t(a)]),s("。） 例如，这是一个有效的 TypeScript 程序：")]),f,n("p",null,[s("你不必告诉 TypeScript city 的类型是 "),_,s(" 它是从初始值推断出来的。类型推断是 TypeScript 的关键部分，"),n("a",w,[s("第 3 章"),t(a)]),s("探讨了如何很好地使用它。 TypeScript 类型系统的目标之一是检测将在运行时抛出异常的代码，而无需运行代码。当你听到 TypeScript 被描述为“静态”类型系统时，它指的就是这个。类型检查器不能总是发现会抛出异常的代码，但它会尝试。 即使你的代码没有抛出异常，它仍然可能不会按照您的意图进行。TypeScript 也试图捕捉其中的一些问题。例如，这个 JavaScript 程序：")]),J,n("p",null,[s("当你运行时，它会抛出： TypeError: Cannot read property 'toUpperCase' of undefined TypeScript 假设数组访问会在边界内，但它不是。结果是意料之外的。 当你使用 any 类型时，也经常会出现未捕获的错误，我们将在"),n("a",x,[s("条目 5"),t(a)]),s(" 和"),n("a",j,[s("第 5 章"),t(a)]),s("中更详细地讨论这些错误。 这些异常的根本原因是 TypeScript 对值类型和现实的理解存在分歧。一个可以保证其静态类型准确性的类型系统被称为健全的。TypeScript 的类型系统非常不健全，也从未打算如此。如果稳固对你很重要，你可能想看看其他语言，比如 Reason 或 Elm。虽然这些确实为运行时安全提供了更多保证，但这是有代价的：不是 JavaScript 的超集，因此迁移将更加复杂。")]),q,A])}const P=e(l,[["render",z],["__file","item1.html.vue"]]);export{P as default};
